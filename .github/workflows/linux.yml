name: Linux

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v3

    - name: Switch Compiler
      run: |
         sudo apt update
         sudo apt-get install -y gcc-10 g++-10


    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.12
      with:
        cmake-version: '3.24.1'
    - name: Use cmake
      run: cmake --version

    - name: install UT/Î¼t
      if: ${{ steps.cache.output.cache-hit != 'true' }}
      run: |
        cd ..
        git clone https://github.com/boost-ext/ut.git
        cmake -Bbuild -H. ./ut
        cd build && make -j8 install
      env:
        CC:   gcc-10
        CXX:  g++-10

    - name: Build Project
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} CMAKE_CXX_COMPILER
        cd build && make
      env:
        CC:   gcc-10
        CXX:  g++-10
      

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}



